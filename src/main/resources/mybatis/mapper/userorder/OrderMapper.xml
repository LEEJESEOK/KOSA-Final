<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.hyundai.kosafinal.mapper.userorder.OrderMapper">

    <resultMap id="MemberOrderProductMap" type="com.hyundai.kosafinal.domain.MemberOrderConfirmDTO">
        <result property="confirm" column="RNUM"/>
        <result property="pSize" column="PSIZE"/>
        <result property="pColor" column="PCOLOR"/>
    </resultMap>

    <!-- 주문 목록 조회 -->
    <select id="getOrderedList" resultType="OrderedListDTO">
        SELECT *
        FROM ORDERED_LIST
        WHERE USER_EMAIL = #{user_email}
        ORDER BY ID DESC
    </select>

    <!-- 주문 상품 목록 조회 -->
    <select id="getOrderItem" resultType="com.hyundai.kosafinal.entity.OrderProduct">
        SELECT DISTINCT OI.ID,
                        OI.PID,
                        OI.PCOLOR,
                        OI.PSIZE,
                        OI.AMOUNT,
                        OI.ORDERED_LIST_ID,
                        P.NAME,
                        P.PRICE,
                        P.BRAND,
                        P.IMAGE1_URI
        FROM ORDER_ITEM OI,
             PRODUCT.PRODUCT P
        WHERE OI.ORDERED_LIST_ID = #{orderedListId}
          AND OI.PID = P.ID
          AND OI.PCOLOR = P.COLOR_ID
          AND OI.PSIZE = P."SIZE"
        ORDER BY OI.ID
    </select>

    <!-- 주문 상세 조회 -->
    <select id="getOrderDetail" resultType="OrderedListDTO">
        SELECT *
        FROM ORDERED_LIST
        WHERE ID = #{id}
    </select>


    <!-- 주문 추가 -->
    <insert id="insertOrderedList" statementType="CALLABLE">
        { CALL SP_ORDEREDLIST_INSERT(#{id}, #{zipcode}, #{address1}, #{address2}, #{receiver}, #{tel}, #{usedPoint},
                                     #{userEmail}, #{totalPrice}, #{deliveryMsg}, #{payType}) }
    </insert>

    <!-- 주문 아이템 추가 -->
    <insert id="insertOrderItem" statementType="CALLABLE">
        <!-- SEQUENCE 미리 조회 -->
        <selectKey resultType="string" keyProperty="id" order="BEFORE">
            SELECT SQ_ORDER_ITEM.nextval FROM dual
        </selectKey>
        { CALL SP_ORDERITEM_INSERT(#{id}, #{pid}, #{pcolor}, #{psize}, #{amount}, #{orderedListId}) }
    </insert>

    <!-- 배송정보 변경 -->
    <update id="updateOrderDelivery" statementType="CALLABLE">
        { CALL SP_ORDER_DELIVERY_UPDATE(#{id}, #{zipcode}, #{address1}, #{address2}, #{receiver}, #{tel},
                                        #{deliveryMsg}) }
    </update>

    <!-- 주문 상태 변경 -->
    <update id="updateOrderStatus" statementType="CALLABLE">
        { CALL SP_ORDER_UPDATE_STATUS(#{id}, #{userEmail}, #{status}) }
    </update>

    <!-- 주문 취소 -->
    <update id="cancelOrder" statementType="CALLABLE">
        { CALL SP_ORDER_CANCEL(#{id}, #{userEmail}) }
    </update>

    <!-- 주문 재고 체크 -->
    <select id="getStock" resultType="int">
        SELECT STOCK_AMOUNT
        FROM PRODUCT.PRODUCT
        WHERE ID = #{id}
          AND "SIZE" = #{psize}
          AND COLOR_ID = #{pcolor}
    </select>

    <!-- 마지막 주문번호 조회 -->
    <select id="getOrderId" resultType="int">
        SELECT SQ_ORDERED_LIST.NEXTVAL
        FROM DUAL
    </select>

    <!-- 포인트 변경 -->
    <update id="updatePoint" statementType="CALLABLE">
        { CALL SP_ORDER_UPDATE_POINT(#{userEmail}, #{point}, #{flag}) }
    </update>

    <!-- 유저가 구매한 상품이 있는지 조회 + 배송 완료 -->
    <select id="getOrderConfirmByEmail" resultMap="MemberOrderProductMap">
        SELECT ROWNUM    AS RNUM,
               OL.PSIZE  AS PSIZE,
               OL.PCOLOR AS PCOLOR
        FROM (SELECT *
              FROM ORDER_ITEM O,
                   ORDERED_LIST L
              WHERE O.ORDERED_LIST_ID = L.ID
                AND O.PID = #{productId}
                AND L.USER_EMAIL = #{email}
                AND L.STATUS = 2) OL
        WHERE ROWNUM = 1
    </select>

    <!-- 백오피스 관련 주문 검색 결과 수 -->
    <select id="searchOrderCount" resultType="int">
        <![CDATA[
            SELECT count(*)
            FROM ordered_list
        ]]>
        <where>
            <!-- 주문 필터링 -->
            <if test="order_keyword != null">
                <if test="order_type=='id'.toString()">
                    id LIKE '%'||#{order_keyword}||'%'
                </if>
                <if test="order_type=='receiver'.toString()">
                    UPPER(receiver) LIKE '%'||UPPER(#{order_keyword})||'%'
                </if>
                <if test="order_type=='email'.toString()">
                    UPPER(user_email) LIKE '%'||UPPER(#{order_keyword})||'%'
                </if>
                <if test="order_type=='tel'.toString()">
                    tel LIKE '%'||#{order_keyword}||'%'
                </if>
            </if>
            <!-- 날짜 필터링 -->
            <trim prefix="and">
                <if test="start_date != null and end_date != null">
                    <![CDATA[
                    TO_CHAR("DATE", 'YYYYMMDD') >= TO_CHAR(#{start_date}, 'YYYYMMDD') AND TO_CHAR("DATE", 'YYYYMMDD') <= TO_CHAR(#{end_date}, 'YYYYMMDD')
                ]]>
                </if>
            </trim>
            <!-- 상품 필터링 -->
            <trim prefix="and">
                <if test="product_keyword != null">
                    <if test="product_type=='id'.toString()">
                        id IN (SELECT ordered_list_id FROM order_item WHERE pid LIKE '%'||#{product_keyword}||'%')
                    </if>
                    <if test="product_type=='name'.toString()">
                        id IN (
                        SELECT oi.ordered_list_id
                        FROM order_item oi, product.product p
                        WHERE oi.pid = p.id
                        AND p.name LIKE '%'||#{product_keyword}||'%'
                        )
                    </if>
                    <if test="product_type=='brand'.toString()">
                        id IN (
                        SELECT oi.ordered_list_id
                        FROM order_item oi, product.product p
                        WHERE oi.pid = p.id
                        AND p.brand LIKE '%'||#{product_keyword}||'%'
                        )
                    </if>
                </if>
            </trim>
            <!-- 배송 필터링 -->
            <trim prefix="and">
                <if test="order_status != -1">
                    status = #{order_status}
                </if>
            </trim>
        </where>
    </select>

    <!-- 백오피스 관련 주문 검색 결과, 페이징 적용 -->
    <select id="searchOrder" resultType="OrderedListDTO">
        SELECT *
        FROM (
        SELECT rownum as rn, id, zipcode, address1, address2, receiver, tel, used_point, user_email,
        total_price, "DATE", status, delivery_msg, pay_type, order_id
        FROM (SELECT * FROM ordered_list ORDER BY id DESC)
        <where>
            <!-- 주문 필터링 -->
            <if test="order_keyword != null">
                <if test="order_type=='id'.toString()">
                    id LIKE '%'||#{order_keyword}||'%'
                </if>
                <if test="order_type=='receiver'.toString()">
                    UPPER(receiver) LIKE '%'||UPPER(#{order_keyword})||'%'
                </if>
                <if test="order_type=='email'.toString()">
                    UPPER(user_email) LIKE '%'||UPPER(#{order_keyword})||'%'
                </if>
                <if test="order_type=='tel'.toString()">
                    tel LIKE '%'||#{order_keyword}||'%'
                </if>
            </if>
            <!-- 날짜 필터링 -->
            <trim prefix="and">
                <if test="start_date != null and end_date != null">
                    <![CDATA[
                    TO_CHAR("DATE", 'YYYYMMDD') >= TO_CHAR(#{start_date}, 'YYYYMMDD') AND TO_CHAR("DATE", 'YYYYMMDD') <= TO_CHAR(#{end_date}, 'YYYYMMDD')
                ]]>
                </if>
            </trim>
            <!-- 상품 필터링 -->
            <trim prefix="and">
                <if test="product_keyword != null">
                    <if test="product_type=='id'.toString()">
                        id IN (
                        SELECT ordered_list_id
                        FROM order_item
                        WHERE UPPER(pid) LIKE '%'||UPPER(#{product_keyword})||'%'
                        )
                    </if>
                    <if test="product_type=='name'.toString()">
                        id IN (
                        SELECT oi.ordered_list_id
                        FROM order_item oi, product.product p
                        WHERE oi.pid = p.id
                        AND UPPER(p.name) LIKE '%'||UPPER(#{product_keyword})||'%'
                        )
                    </if>
                    <if test="product_type=='brand'.toString()">
                        id IN (
                        SELECT oi.ordered_list_id
                        FROM order_item oi, product.product p
                        WHERE oi.pid = p.id
                        AND UPPER(p.brand) LIKE '%'||UPPER(#{product_keyword})||'%'
                        )
                    </if>
                </if>
            </trim>
            <!-- 배송 필터링 -->
            <trim prefix="and">
                <if test="order_status != -1">
                    status = #{order_status}
                </if>
            </trim>
        </where>
        <![CDATA[
            )
            WHERE rn BETWEEN ((#{pageNum} - 1) * #{amount} + 1) AND (#{pageNum} * #{amount})
        ]]>
    </select>


    <resultMap id="OrderCountMap" type="HashMap">
        <result property="date" column="DATE"/>
        <result property="count" column="COUNT" javaType="int"/>
    </resultMap>

    <select id="selectWeekOrderedCount" resultMap="OrderCountMap">
        SELECT TO_CHAR("DATE", 'yyyy-MM-dd HH24') AS "DATE", COUNT(*) AS COUNT
        FROM ORDERED_LIST
        WHERE "DATE" + 7 > SYSDATE
        GROUP BY TO_CHAR("DATE", 'yyyy-MM-dd HH24')
        ORDER BY "DATE"
    </select>

    <resultMap id="OrderPriceMap" type="HashMap">
        <result property="date" column="DATE"/>
        <result property="price" column="PRICE" javaType="int"/>
    </resultMap>
    <select id="selectWeekOrderedPrice" resultMap="OrderPriceMap">
        SELECT TO_CHAR("DATE", 'yyyy-MM-dd HH24') AS "DATE", SUM(TOTAL_PRICE - USED_POINT) AS PRICE
        FROM ORDERED_LIST
        WHERE "DATE" + 7 > SYSDATE
        GROUP BY TO_CHAR("DATE", 'yyyy-MM-dd HH24')
        ORDER BY "DATE"
    </select>

</mapper>